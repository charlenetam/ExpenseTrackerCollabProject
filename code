import datetime

def validate_date(date_str):
    #Check if the date string is in the correct format (YYYY-MM-DD).
    try:
        datetime.datetime.strptime(date_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False

def add_expense(expenses):
    #Add a new expense with validated category, amount, and date.
    while True:
        category = input("Enter category: ").strip()
        if not category:
            print("Category cannot be empty.")
            continue
        
        amount_input = input("Enter amount: ").strip()
        try:
            amount = float(amount_input)
            if amount <= 0:
                print("Amount must be a positive number.")
                continue
        except ValueError:
            print("Invalid amount. Please enter a number.")
            continue
        
        date_input = input("Enter date (YYYY-MM-DD): ").strip()
        if not validate_date(date_input):
            print("Invalid date format. Please use YYYY-MM-DD.")
            continue
        
        expenses.append({
            'category': category,
            'amount': amount,
            'date': date_input
        })
        print("Expense added successfully.")
        break

def view_expenses(expenses):
    #Display all expenses in a formatted list.
    if not expenses:
        print("No expenses to display.")
        return
    
    print("\nAll Expenses:")
    print("-" * 30)
    for idx, expense in enumerate(expenses, start=1):
        print(f"{idx}. Category: {expense['category']}")
        print(f"   Amount: ${expense['amount']:.2f}")
        print(f"   Date: {expense['date']}")
        print("-" * 30)

def filter_by_category(expenses, category):
    #Display expenses filtered by a specific category.
    filtered = [exp for exp in expenses if exp['category'].lower() == category.lower()]
    if not filtered:
        print(f"No expenses found in category '{category}'.")
        return
    
    print(f"\nExpenses in category '{category}':")
    print("-" * 30)
    for idx, exp in enumerate(filtered, start=1):
        print(f"{idx}. Category: {exp['category']}")
        print(f"   Amount: ${exp['amount']:.2f}")
        print(f"   Date: {exp['date']}")
        print("-" * 30)

def calculate_total(expenses):
    #Calculate and display the total of all expenses.
    total = sum(exp['amount'] for exp in expenses)
    print(f"\nTotal Expenses: ${total:.2f}")

def delete_expenses(expenses, category, date):
    #Delete all expenses matching the given category and date.
    initial_count = len(expenses)
    expenses[:] = [exp for exp in expenses if not (exp['category'].lower() == category.lower() and exp['date'] == date)]
    deleted = initial_count - len(expenses)
    
    if deleted == 0:
        print(f"No expenses found with category '{category}' and date '{date}'.")
    else:
        print(f"Deleted {deleted} expenses.")

def main():
    expenses = []
    # Start an infinite loop to keep the program running until the user chooses to exit
    while True:

        #Display menu options
        print("\n=== Expense Tracker ===")
        print("1. Add New Expense")
        print("2. View All Expenses")
        print("3. Filter Expenses by Category")
        print("4. Calculate Total Expenses")
        print("5. Delete Expenses by Category and Date")
        print("6. Exit")
        #Get user input and remove any extra spaces
        choice = input("Enter your choice (1-6): ").strip()

        if choice == '1':
            add_expense(expenses)
        elif choice == '2':
            view_expenses(expenses)
        elif choice == '3':
            category = input("Enter category to filter: ").strip()
            filter_by_category(expenses, category)
        elif choice == '4':
            calculate_total(expenses)
        elif choice == '5':
            category = input("Enter category to delete: ").strip()
            date = input("Enter date (YYYY-MM-DD) to delete: ").strip()
            if not validate_date(date):
                print("Invalid date format. Please use YYYY-MM-DD.")
                continue
            delete_expenses(expenses, category, date)
        elif choice == '6':
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 6.")

if __name__ == "__main__":
    main()
